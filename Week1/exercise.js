// Imperative loop
// Project Euler Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Write a JavaScript function projectEulerProblem2 which returns the solution to this problem.
// It should be implemented using an imperative loop (i.e. using either for or while)

function projectEularProblem2(max) {
    let sum = 0;
    let firstNum = 1;
    let secondNum = 2;
    while (secondNum <= max) {
        if (secondNum % 2 === 0) {
            sum += secondNum;
        }
        let next = firstNum + secondNum;
        firstNum = secondNum;
        secondNum = next;
    }
    return sum;
}


// Recursive loop
// Project Euler Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Solve this again using a recursive function and no mutable variables.

function eulerRecursive(max) {
    function eulerRecursiveAux(first, second, acc) {
        return max < second ? acc : eulerRecursiveAux(second, first + second, second % 2 === 0 ? acc + second : acc)
    }
    return eluerRecursiveAux(1, 2, 0);
}
